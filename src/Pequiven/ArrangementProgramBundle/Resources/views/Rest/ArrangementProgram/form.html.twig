{% extends "PequivenSEIPBundle:Template:ExtJs/layout.html.twig" %}


{% trans_default_domain 'PequivenArrangementProgramBundle' %}

{% set summary = entity.summary({'limitMonthToNow':true}) %}

{% block stylesheet %}
    {{ parent() }}

    <style type="text/css" media="screen">
        .x-grid-row-summary .x-grid-cell-inner {
            font-weight: bold;
        }
        .icon-grid {
            background: url(../shared/icons/fam/grid.png) no-repeat 0 -1px;
        }
        .x-group-hd-container {
            display:none;
        }
        /* Tags */
        .tag {
            padding: 0 4px 2px;
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;
        }
        .ie9 .tag {
            padding: 1px 4px;
        }
        small.tag {
            font-size: 10px;
            line-height: 14px;
            text-transform: uppercase;
            padding: 0 2px;
            vertical-align: 1px;
            border-width: 1px;
            border-style: solid;
            -webkit-border-radius: 3px;
            -moz-border-radius: 3px;
            border-radius: 3px;
        }

    </style>
    <link rel="stylesheet" href="{{ asset('bundles/tecnocreacionesvzlagovernment/template/developer/css/colors3860.css?v=1') }}">
{% endblock %}

{% block javascript %}      
    <script src="{{ asset('bundles/tecnocreacionesvzlagovernment/template/developer/js/libs/jquery-1.8.2.min.js') }}"></script>

    <script type="text/javascript">
        var idTemp = 0;
        var formatPhp = "Y-m-d H:i:s";
                var advancesPlanned = {{ summary['advancesPlanned'] }};
                var month = '{{ 'now'|date('m') }}';
        Ext.require([
            'Ext.grid.*',
            'Ext.data.*',
            'Ext.form.field.Number',
            'Ext.form.field.Date',
            'Ext.tip.QuickTipManager',
            'Ext.layout.container.Fit'
        ]);
        Ext.onReady(function () {
            Ext.tip.QuickTipManager.init();
            var idPG = '{{app.request.get('id')}}';
            var win, buttonAddComment;
            var store = Ext.create('Ext.data.Store', {
                autoLoad: true,
                autoSync: true,
                model: 'Pequiven.ArrangementProgramBundle.Entity.GoalDetails',
                groupField: 'project',
                proxy: {
                    type: 'rest',
                    url: "{{ path('AP_notification_search') }}" + idPG + "/" + idTemp + "/goals-details.json",
        {#id:app.request.get('id')#}
                        reader: {
                            type: 'json',
                            rootProperty: 'data'
                        },
                        writer: {
                            type: 'json'
                        },
                        actionMethods: {
                            update: 'POST'
                        }
                    },
                    listeners: {
                        write: function (store, operation) {
                            var record = operation.getRecords()[0],
                                    name = Ext.String.capitalize(operation.action),
                                    verb;
                            if (name == 'Destroy') {
                                verb = 'Destroyed';
                            } else {
                                verb = name + 'd';
                            }
        {#Ext.example.msg(Translator.trans(name), Ext.String.format("{{ "pequiven.goals.goal"|trans }} {1} {0}", Translator.trans(verb), record.getId()));#}

                        },
                        update: function (store, record, operation, modifiedFieldNames, eOpts) {
                            if (Ext.data.Model.EDIT == operation) {
                                store.getProxy().setExtraParam("_method", "PUT");
                            } else if (Ext.data.Model.COMMIT == operation) {
                                delete store.getProxy().getExtraParams()["_method"];
                            }
                        }
                    }
                });
                /**
                 * Calcula el promedio de los valores planeados de una fila
                 * @param {type} data
                 * @returns {form.html_L11.calculateAverageRow.value}             */
                var calculateAverageRow = function (data, property) {
                    var key, value = 0;
                    for (key in data) {
                        if (key.match(property)) {
                            value = value + data[key];
                        }
                    }
                    return value;
                };
                var monthsPlanned = {{ monthsPlanned | json_encode()|raw }};
                        var getMonthOfPlanned = function (key) {
                            return monthsPlanned[key];
                        };
                var summaryTypeOfSummary = function (records, property) {
                    var i, length = records.length, data, average, total = 0, subAverage;
                    for (i = 0; i < length; i++) {
                        data = records[i].data;
                        subAverage = calculateAverageRow(data, property);
                        total = total + subAverage;
                    }
                    average = 0;
                    if (total > 0) {
                        average = total / length;
                    }
                    return average;
                };
                /**
                 * Custom function used for column renderer
                 * @param {Object} val
                 */
                function valGoalDetails(val, metaData, record, rowIndex, colIndex, store) {
                    var columnName = grid.columns[colIndex + 7].dataIndex;
                    var data = record.data;
                    if (data._data[columnName] != undefined) {
                        var extraData = data._data[columnName];
                        if (extraData['isEnabled'] != undefined) {
                            if (extraData.isEnabled == false) {
                                metaData.css = 'td-bg-disabled';
                                return val;
                            }
                        }
                    }

                    if (val > 0) {
                        return '<span style="color:green;">' + formatNumber(val) + '</span>';
                    }

                    if (val < 0) {
                        return '<span style="color:red;">' + val + '</span>';
                    }

                    return val;
                }
                /**
                 * Calcula el resumen de lo planeado y real 
                 */
                var calculateSummaryRenderer = function (records, values, nameField) {
                    var i = 0, length = records.length, total = 0, record, val;
                    for (; i < length; ++i) {
                        record = records[i];
                        val = record.get(nameField);
                        if (val > 0) {
                            total += (record.get('goalWeight') / 100) * val;
                        }
                    }
                    return total;
                };
                /**
                 * Formatea los numeros del resumen
                 * @param {type} value
                 * @param {type} summaryData
                 * @param {type} dataIndex
                 * @returns {unresolved}          
                 */
                var valSummaryRenderer = function (value, summaryData, dataIndex) {
                    return formatNumber(value);
                };
                var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
                    clicksToEdit: 1,
                    listeners: {
                        cancelEdit: function (rowEditing, context) {
                            // Canceling editing of a locally added, unsaved record: remove it
                            if (context.record.phantom) {
                                store.remove(context.record);
                            }
                        },
                        beforeedit: function (editor, context, eOpts) {
                            var columnName = context.field, data = context.record.data;
                            if (data._data[columnName] != undefined) {
                                var extraData = data._data[columnName];
                                if (extraData['isEnabled'] != undefined) {
                                    if (extraData.isEnabled == false) {
                                        return false;
                                    }
                                }
                            }
                            if (context.value == 0) {
                                context.value = '';
                            }
                            return true;
                        }
                    }
                });
                var fieldTypeProperties = {
                    xtype: 'numberfield',
                    minValue: 0,
                    maxValue: 100
                };
                /**
                 * 
                 * DATA DEL SELECT
                 */
                var states = Ext.create('Ext.data.Store', {
                    fields: ['id', 'name'],
                    data: [
                        {"id": "0", "name": "GENERAL"},
        {% for resp in responsibles %}
                        {"id": "{{resp.id}}", "name": "{{resp.Responsable|upper}}"},
        {% endfor %}                                                                             
                    ]
                });
                var widthColumnValues = 60;
                var grid = Ext.create('Ext.grid.Panel', {
                    selType: 'cellmodel',
                    renderTo: 'grid-example-2',
                    plugins: [cellEditing],
                    height: 600,
                    width: '100%',
                    frame: true,
                    title: '{{ "pequiven.goals.goals"|trans }}',
                    store: store,
                    iconCls: 'icon-user',
                    listeners: {
                        beforeedit: function (editor, context, eOpts) {
                            //return false;
                        }
                    },
                    features: [{
                            id: 'group',
                            ftype: 'groupingsummary',
                            groupHeaderTpl: '{name}',
                            hideGroupedHeader: true,
                            enableGroupingMenu: false
                        }],
                    dockedItems: [{
                            xtype: 'toolbar',
                            items: [
                                {
                                    itemId: 'addCommentBtn',
                                    text: '{{ "pequiven.arrangement_program.buttons.add_comment"|trans }}',
                                    iconCls: 'icon-add',
                                    xtype: 'button',
        {#                            ui: 'default',#}
                                    handler: function () {
                                        buttonAddComment = this;
                                        if (!win) {
                                            var form = Ext.create('Ext.form.Panel', {
                                                url: '{{ path('arrangementprogram_add_observation',{id: entity.id }) }}',
                                                layout: {
                                                    type: 'vbox',
                                                    align: 'stretch'
                                                },
                                                border: true,
                                                bodyPadding: 10,
                                                fieldDefaults: {
                                                    labelAlign: 'top',
                                                    labelWidth: 100,
                                                    labelStyle: 'font-weight:bold'
                                                },
                                                items: [
                                                    {
                                                        xtype: 'textareafield',
                                                        fieldLabel: '{{ "pequiven.form.observations"|trans }}',
                                                        name: 'observation',
                                                        labelAlign: 'top',
                                                        flex: 1,
                                                        margins: '0',
                                                        height: 250,
                                                        allowBlank: false
                                                    }],
                                                buttons: [{
                                                        text: '{{ 'pequiven.buttons.cancel'|trans({},'messages') }}',
                                                        handler: function () {
                                                            this.up('form').getForm().reset();
                                                            this.up('window').hide();
                                                        }
                                                    }, {
                                                        text: '{{ 'pequiven.buttons.submit'|trans({},'messages') }}',
                                                        formBind: true,
                                                        disabled: true,
                                                        handler: function () {
                                                            var form = this.up('form').getForm();
                                                            if (form.isValid()) {
                                                                // In a real application, this would submit the form to the configured url
                                                                form.submit({
                                                                    success: function (form, action) {
                                                                        Ext.MessageBox.alert('{{ 'pequiven.arrangement_program.arrangement_program'|trans }}', '{{ 'pequiven.arrangement_program.flash.send_comment'|trans({},'PequivenArrangementProgramBundle') }}');
                                                                        form.reset();
                                                                    },
                                                                    failure: function (form, action) {
                                                                        Ext.Msg.alert('{{ 'pequiven.arrangement_program.arrangement_program'|trans }}', '{{ 'pequiven.arrangement_program.flash.no_send_comment'|trans({},'PequivenArrangementProgramBundle') }}');
                                                                        form.reset();
                                                                    }
                                                                });
                                                                this.up('window').hide();
                                                            }
                                                        }
                                                    }]
                                            });
                                            win = Ext.create('widget.window', {
                                                title: '{{ 'pequiven.arrangement_program.arrangement_program'|trans }}',
                                                header: {
                                                    titlePosition: 2,
                                                    titleAlign: 'center'
                                                },
                                                closable: true,
                                                closeAction: 'hide',
                                                maximizable: true,
                                                animateTarget: buttonAddComment,
                                                width: 600,
                                                minWidth: 350,
                                                height: 350,
                                                tools: [{type: 'pin'}],
                                                layout: {
                                                    type: 'border',
                                                    padding: 5
                                                },
                                                items: {
                                                    region: 'center',
                                                    xtype: 'container',
                                                    items: form
                                                }
                                            });
                                        }
                                        if (win.isVisible()) {
                                            win.hide(this, function () {
                                                buttonAddComment.enable();
                                            });
                                        } else {
                                            win.show(this, function () {
                                                buttonAddComment.enable();
                                            });
                                        }
                                    }
                                }, {
                                    itemId: 'refreshBtn',
                                    text: '{{ "pequiven.arrangement_program.buttons.refresh"|trans }}',
                                    iconCls: 'icon-refresh',
                                    xtype: 'button',
                                    handler: function () {
                                        store.load();
                                    }

                                },
                                Ext.create('Ext.form.ComboBox', {
                                    itemId: 'userSelect',
        {% if entity.type == constant('Pequiven\\ArrangementProgramBundle\\Entity\\ArrangementProgram::TYPE_ARRANGEMENT_PROGRAM_STRATEGIC') %}
            {% set gerencia = 'strategic' %}
        {% endif %}
        {% if entity.type == constant('Pequiven\\ArrangementProgramBundle\\Entity\\ArrangementProgram::TYPE_ARRANGEMENT_PROGRAM_TACTIC') %}
            {% set gerencia = APentity.tacticalObjective.gerencia %}
        {% endif %}
        {% if entity.type == constant('Pequiven\\ArrangementProgramBundle\\Entity\\ArrangementProgram::TYPE_ARRANGEMENT_PROGRAM_OPERATIVE') %}
            {% set gerencia = APentity.operationalObjective.gerencia %}
        {% endif %}   

        {% if ((gerencia == 'strategic') or (gerencia.getIndividualNotification == true))%}
                                    hidden: false,
        {% else %}
                                    hidden: true,
        {% endif %}
                                            fieldLabel: '<b>Responsable:</b>',
                                    store: states,
                                    queryMode: 'local',
                                    editable: false,
                                    autoSelect: true,
                                    labelWidth: 95,
                                    displayField: 'name',
                                    valueField: 'id',
                                    renderTo: Ext.getBody(),
                                    listeners: {
                                        select: function () {
                                            store.getProxy().setExtraParam("user", this.value);
                                            store.load();
                                        }
                                    }
                                })
                            ]
                        }],
                    columns: [{
                            text: 'Nro',
                            width: 30,
                            sortable: true,
                            locked: true,
                            renderer: function (v, meta, rec, rowIndex) {
                                return ++rowIndex;
                            }
                        }, {
                            text: '{{ "pequiven.name"|trans({},"messages") }}',
                            flex: 1,
                            width: 425,
                            sortable: true,
                            dataIndex: 'name',
                            locked: true,
                            hideable: false,
                            renderer: function (v, m, r) {
                                var d = r.data.goal.name;
                                return d;
                            },
                            summaryType: 'count',
                            summaryRenderer: function (value, summaryData, dataIndex) {
                                return ((value === 0 || value > 1) ? '' + value + ' {{ 'pequiven.goals.goals_only'|trans }}' : '1 {{ 'pequiven.goals.goal'|trans }}');
                            }
                        }, {
                            header: '{{ "pequiven.start_date"|trans({},"messages") }}',
                            width: 80,
                            sortable: true,
                            dataIndex: 'goalDateStart',
                            locked: true,
                            renderer: function (v, m, r) {
                                var d = r.data.goal.startDate;
                                if (!(d instanceof Date)) {
                                    d = Ext.Date.parse(d, formatPhp, true);
                                }
                                return Ext.util.Format.date(d, 'Y-m-d');
                            },
                            summaryType: 'min',
                            summaryRenderer: Ext.util.Format.dateRenderer('Y-m-d')
                        }, {
                            text: '{{ "pequiven.end_date"|trans({},"messages") }}',
                            width: 80,
                            sortable: true,
                            dataIndex: 'goalDateEnd',
                            locked: true,
                            renderer: function (v, m, r) {
                                var d = r.data.goal.endDate;
                                if (!(d instanceof Date)) {
                                    d = Ext.Date.parse(d, formatPhp, true);
                                }
                                return Ext.util.Format.date(d, 'Y-m-d');
                            },
                            summaryType: 'max',
                            summaryRenderer: Ext.util.Format.dateRenderer('Y-m-d')
                        }, {text: '{{ "pequiven.weight_goal"|trans({},"messages") }}',
                            sortable: true,
                            width: 60,
                            dataIndex: 'goalWeight',
                            locked: true,
                            renderer: function (v, m, r) {
                                var d = r.data.goal.weight;
                                return formatNumber(d) + '%';
                            },
                            summaryType: function (records, values) {
                                var i, key, value = 0, summary, valuePlanned = 0, plannedMonth = 0;
                                for (i = 0; i < 1; i++) {
                                    var data = records[i].data;
                                    for (key in data) {
                                        if (key.match('Real')) {
                                            summary = calculateSummaryRenderer(records, values, key);
                                            value = value + summary;
                                        }
                                        if (key.match('Planned')) {
                                            plannedMonth = getMonthOfPlanned(key);
                                            if (!(plannedMonth > month)) {
                                                summary = calculateSummaryRenderer(records, values, key);
                                                valuePlanned = valuePlanned + summary;
                                            }
                                        }
                                    }
                                }
                                advancesPlanned = valuePlanned;
                                var programSummary = document.getElementById("program_summary");
                                programSummary.innerHTML = formatNumber(value);
                                var tenPercentage = advancesPlanned - (advancesPlanned * 0.10);
                                var classSummary = '';
                                if (value >= advancesPlanned) {
                                    classSummary = 'green-bg';
                                } else if (value >= tenPercentage && value < advancesPlanned) {
                                    classSummary = 'orange-bg';
                                } else if (value < tenPercentage) {
                                    classSummary = 'red-bg';
                                }
                                if (advancesPlanned == 0) {
                                    classSummary = '';
                                }

                                var programPlanned = document.getElementById("program_planned");
                                var programSummaryContainer = document.getElementById("program_summary_container");
                                programPlanned.innerHTML = formatNumber(advancesPlanned);
                                programSummaryContainer.className = 'tag ' + classSummary;
                                summary = 0;
                                for (i in values) {
                                    summary += values[i];
                                }
                                return summary;
                            },
                            summaryRenderer: function (value, summaryData, dataIndex) {
                                return formatNumber(value) + '%';
                            }
                        }, {
                            text: '{{ 'pequiven.quarter.first'|trans({},'messages') }}',
                            columns: [
                                {
                                    text: '{{ "pequiven.months.january"|trans({},"messages") }}',
                                    columns: [
                                        {
                                            text: '{{ "pequiven.goals.abbr_planned"|trans }}',
                                            width: widthColumnValues,
                                            baseCls: 'bg-column-gray',
                                            sortable: true,
                                            groupable: false,
                                            align: 'center',
                                            dataIndex: 'januaryPlanned',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'januaryPlanned';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }, {
                                            text: '{{ "pequiven.goals.abbr_real"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            align: 'center',
                                            dataIndex: 'januaryReal',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'januaryReal';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }
                                    ]
                                },
                                {
                                    text: '{{ "pequiven.months.february"|trans({},"messages") }}',
                                    columns: [
                                        {
                                            text: '{{ "pequiven.goals.abbr_planned"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            baseCls: 'bg-column-gray',
                                            width: widthColumnValues,
                                            align: 'center',
                                            dataIndex: 'februaryPlanned',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'februaryPlanned';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }, {
                                            text: '{{ "pequiven.goals.abbr_real"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            align: 'center',
                                            dataIndex: 'februaryReal',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'februaryReal';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }
                                    ]
                                },
                                {
                                    text: '{{ "pequiven.months.march"|trans({},"messages") }}',
                                    columns: [
                                        {
                                            text: '{{ "pequiven.goals.abbr_planned"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            baseCls: 'bg-column-gray',
                                            align: 'center',
                                            dataIndex: 'marchPlanned',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'marchPlanned';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }, {
                                            text: '{{ "pequiven.goals.abbr_real"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            align: 'center',
                                            dataIndex: 'marchReal',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'marchReal';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }
                                    ]
                                }
                            ]
                        }, {
                            text: '{{ 'pequiven.quarter.second'|trans({},'messages') }}',
                            columns: [
                                {
                                    text: '{{ "pequiven.months.april"|trans({},"messages") }}',
                                    columns: [
                                        {
                                            text: '{{ "pequiven.goals.abbr_planned"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            baseCls: 'bg-column-gray',
                                            align: 'center',
                                            dataIndex: 'aprilPlanned',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'aprilPlanned';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }, {
                                            text: '{{ "pequiven.goals.abbr_real"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            align: 'center',
                                            dataIndex: 'aprilReal',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'aprilReal';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }
                                    ]
                                },
                                {
                                    text: '{{ "pequiven.months.may"|trans({},"messages") }}',
                                    columns: [
                                        {
                                            text: '{{ "pequiven.goals.abbr_planned"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            baseCls: 'bg-column-gray',
                                            align: 'center',
                                            dataIndex: 'mayPlanned',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'mayPlanned';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }, {
                                            text: '{{ "pequiven.goals.abbr_real"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            align: 'center',
                                            dataIndex: 'mayReal',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'mayReal';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }
                                    ]
                                },
                                {
                                    text: '{{ "pequiven.months.june"|trans({},"messages") }}',
                                    columns: [
                                        {
                                            text: '{{ "pequiven.goals.abbr_planned"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            baseCls: 'bg-column-gray',
                                            align: 'center',
                                            dataIndex: 'junePlanned',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'junePlanned';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }, {
                                            text: '{{ "pequiven.goals.abbr_real"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            align: 'center',
                                            dataIndex: 'juneReal',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'juneReal';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            text: '{{ 'pequiven.quarter.third'|trans({},'messages') }}',
                            columns: [
                                {
                                    text: '{{ "pequiven.months.july"|trans({},"messages") }}',
                                    columns: [
                                        {
                                            text: '{{ "pequiven.goals.abbr_planned"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            baseCls: 'bg-column-gray',
                                            align: 'center',
                                            dataIndex: 'julyPlanned',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'julyPlanned';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }, {
                                            text: '{{ "pequiven.goals.abbr_real"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            align: 'center',
                                            dataIndex: 'julyReal',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'julyReal';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }
                                    ]
                                },
                                {
                                    text: '{{ "pequiven.months.august"|trans({},"messages") }}',
                                    columns: [
                                        {
                                            text: '{{ "pequiven.goals.abbr_planned"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            baseCls: 'bg-column-gray',
                                            align: 'center',
                                            dataIndex: 'augustPlanned',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'augustPlanned';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }, {
                                            text: '{{ "pequiven.goals.abbr_real"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            align: 'center',
                                            dataIndex: 'augustReal',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'augustReal';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }
                                    ]
                                }, {
                                    text: '{{ "pequiven.months.september"|trans({},"messages") }}',
                                    columns: [
                                        {
                                            text: '{{ "pequiven.goals.abbr_planned"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            baseCls: 'bg-column-gray',
                                            align: 'center',
                                            dataIndex: 'septemberPlanned',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'septemberPlanned';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }, {
                                            text: '{{ "pequiven.goals.abbr_real"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            align: 'center',
                                            dataIndex: 'septemberReal',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'septemberReal';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            text: '{{ 'pequiven.quarter.fourth'|trans({},'messages') }}',
                            columns: [
                                {
                                    text: '{{ "pequiven.months.october"|trans({},"messages") }}',
                                    columns: [
                                        {
                                            text: '{{ "pequiven.goals.abbr_planned"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            baseCls: 'bg-column-gray',
                                            align: 'center',
                                            dataIndex: 'octoberPlanned',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'octoberPlanned';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }, {
                                            text: '{{ "pequiven.goals.abbr_real"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            align: 'center',
                                            dataIndex: 'octoberReal',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'octoberReal';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }
                                    ]
                                }, {
                                    text: '{{ "pequiven.months.november"|trans({},"messages") }}',
                                    columns: [
                                        {
                                            text: '{{ "pequiven.goals.abbr_planned"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            baseCls: 'bg-column-gray',
                                            align: 'center',
                                            dataIndex: 'novemberPlanned',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'novemberPlanned';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }, {
                                            text: '{{ "pequiven.goals.abbr_real"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            align: 'center',
                                            dataIndex: 'novemberReal',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'novemberReal';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }
                                    ]
                                }, {
                                    text: '{{ "pequiven.months.december"|trans({},"messages") }}',
                                    columns: [
                                        {
                                            text: '{{ "pequiven.goals.abbr_planned"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            baseCls: 'bg-column-gray',
                                            align: 'center',
                                            dataIndex: 'decemberPlanned',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'decemberPlanned';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }, {
                                            text: '{{ "pequiven.goals.abbr_real"|trans }}',
                                            sortable: true,
                                            groupable: false,
                                            width: widthColumnValues,
                                            align: 'center',
                                            dataIndex: 'decemberReal',
                                            renderer: valGoalDetails,
                                            field: fieldTypeProperties,
                                            summaryType: function (records, values) {
                                                var nameField = 'decemberReal';
                                                return calculateSummaryRenderer(records, values, nameField);
                                            },
                                            summaryRenderer: valSummaryRenderer
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            text: '{{ "pequiven.goals.summary"|trans }}',
                            locked: true,
                            hideable: false,
                            columns: [
                                {
                                    text: '{{ "pequiven.goals.abbr_planned"|trans }}',
                                    sortable: true,
                                    groupable: false,
                                    width: widthColumnValues,
                                    baseCls: 'bg-column-gray',
                                    align: 'center',
                                    renderer: function (v, m, r) {
                                        var data = m.record.data;
                                        return formatNumber(calculateAverageRow(data, 'Planned')) + "%";
                                    },
                                    summaryType: function (records, values) {
                                        return summaryTypeOfSummary(records, 'Planned');
                                    },
                                    summaryRenderer: function (value, summaryData, dataIndex) {
                                        return formatNumber(value) + '%';
                                    }
                                }, {
                                    text: '{{ "pequiven.goals.abbr_real"|trans }}',
                                    sortable: true,
                                    groupable: false,
                                    width: widthColumnValues,
                                    align: 'center',
                                    renderer: function (v, m, r) {
                                        var data = m.record.data;
                                        return formatNumber(calculateAverageRow(data, 'Real')) + "%";
                                    },
                                    summaryType: function (records, values) {
                                        return summaryTypeOfSummary(records, 'Real');
                                    },
                                    summaryRenderer: function (value, summaryData, dataIndex) {
                                        return formatNumber(value) + '%';
                                    }
                                }
                            ]
                        }
                    ]
                });
            });
    </script>
{% endblock javascript %}
{% block content %}
    <br/> 
    <table width="100%">
        <tr>
            <td>
                <b>{{ 'pequiven.ref'|trans({},'messages') }}:</b> {{ entity.ref }}
            </td>            
        </tr>
        <tr>
            <td colspan="2">
                <b>{{ "pequiven.arrangement_program.advances_in_details"|trans }}:</b>
                &nbsp;
                <small class="tag" id="program_summary_container">
                    <span id="program_summary">0</span>/
                    <span id="program_planned">0</span>%
                </small>
            </td>
        </tr>            
    </table>  
    <div id="table-summary"></div>
    <br/>
    <div id="grid-example-2"></div>    
{% endblock content %}