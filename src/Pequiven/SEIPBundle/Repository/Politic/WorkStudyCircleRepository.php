<?php

namespace Pequiven\SEIPBundle\Repository\Politic;

use Pequiven\SEIPBundle\Entity\Politic\WorkStudyCircle;
use Pequiven\SEIPBundle\Entity\Period;
use Pequiven\SEIPBundle\Entity\User;
use Pequiven\SEIPBundle\Doctrine\ORM\SeipEntityRepository as EntityRepository;

/**
 * Repositorio del Círculo de Estudio de Trabajo
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WorkStudyCircleRepository extends EntityRepository {

    /**
     * Crea un paginador para los Circulos de Estudio y Trabajo
     * 
     * @param array $criteria
     * @param array $orderBy
     * @return \Doctrine\DBAL\Query\QueryBuilder
     */
    public function createPaginatorByWorkStudyCircle(array $criteria = null, array $orderBy = null) {
        $orderBy['wsc.name'] = 'ASC';
        return $this->createPaginator($criteria, $orderBy);
    }

    /**
     * 
     * @param array $criteria
     * @return type
     */
    function findWorkStudyCircle(array $criteria = null) {
        $queryBuilder = $this->getCollectionQueryBuilder();
        $criteria = new \Doctrine\Common\Collections\ArrayCollection($criteria);

        if (($phase = $criteria->remove('phase'))) {
            $queryBuilder
                    ->andWhere('wsc.phase = :phase')
                    ->setParameter('phase', $phase)
            ;
        }

        if (($complejo = $criteria->remove('complejo'))) {
            $queryBuilder
                    ->andWhere('wsc.complejo = :complejo')
                    ->setParameter('complejo', $complejo)
            ;
        }

        if (($workStudyCircleParent = $criteria->remove('workStudyCircleParent'))) {
            $queryBuilder
                    ->andWhere('wsc.parent = :workStudyCircleParent')
                    ->setParameter('workStudyCircleParent', $workStudyCircleParent)
            ;
        }

        return $queryBuilder->getQuery()->getResult();
    }

    protected function applyCriteria(\Doctrine\ORM\QueryBuilder $queryBuilder, array $criteria = null) {
        $criteria = new \Doctrine\Common\Collections\ArrayCollection($criteria);

        if (($phase = $criteria->remove('phase'))) {
            $queryBuilder
                    ->andWhere('wsc.phase = :phase')
                    ->setParameter('phase', $phase)
            ;
        }
        if (($period = $criteria->remove('period'))) {
            $queryBuilder
                    ->andWhere('wsc.period = :period')
                    ->setParameter('period', $period)
            ;
        }

        if (($complejo = $criteria->remove('complejo'))) {
            $queryBuilder
                    ->andWhere('wsc.complejo = :complejo')
                    ->setParameter('complejo', $complejo)
            ;
        }

        if (($gerencia = $criteria->remove('firstLineManagement'))) {
            $queryBuilder
                    ->innerJoin('wsc.gerencias', 'g')
                    ->andWhere('g.id = :gerencia')
                    ->setParameter('gerencia', $gerencia)
            ;
        }

        if (($gerenciaSecond = $criteria->remove('secondLineManagement'))) {
            $queryBuilder
                    ->innerJoin('wsc.gerenciaSeconds', 'gs')
                    ->andWhere('gs.id = :gerenciaSecond')
                    ->setParameter('gerenciaSecond', $gerenciaSecond)
            ;
        }
        
        if (($member = $criteria->remove('members'))) {
            $queryBuilder
                    ->innerJoin('wsc.members', 'mb')
                    ->andWhere('mb.id = :member')
                    ->setParameter('member', $member)
            ;
        }

        if (($coordinators = $criteria->remove('coordinators'))) {

            $array = explode('[', $coordinators);
            $coordinatorsArray = explode(']', $array[1]);

            $queryBuilder
                    ->andWhere($queryBuilder->expr()->in('wsc.coordinator', $coordinatorsArray[0]))
            ;
        }

        parent::applyCriteria($queryBuilder, $criteria->toArray());
    }

    protected function getAlias() {
        return 'wsc';
    }

    /**
     * Crea un paginador de los Circulos de Estudios
     * Filtrados por Programas de Gestión
     * @param array $criteria
     * @param array $orderBy
     * @return \Doctrine\DBAL\Query\QueryBuilder
     */
    function createPaginatorWorkStudy(array $criteria = null, array $orderBy = null) {

        //$criteria['for_view_work'] = false;
        $orderBy['wsc.id'] = 'ASC';

        return $this->createPaginator($criteria, $orderBy);
    }

}
